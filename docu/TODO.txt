backlog
=======

frontend
* authenticate frontend
* download results as csv file
* mtime format (is there a std. json time format)?
* fix sorting UI
* exit only if test is stopped
* add more frontend tests

panic: could not locate box "../web"

goroutine 1 [running]:
github.com/GeertJohan/go%2erice.MustFindBox(0x808348, 0x6, 0x0)
        /home/mark/devel/gocode/src/github.com/GeertJohan/go.rice/box.go:110 +0x82
github.com/finklabs/GoGrinder/gogrinder.(*TestServer).Router(0x1274e180, 0x1274e180)
        /home/mark/devel/gocode/src/github.com/finklabs/GoGrinder/gogrinder/server.go:153 +0xae

backend
* fix TODOs

scenario

tests
* gogrinder/integration_test.go Setting

defects
* need to check if frontend port is available at startup
* check and report missing testcase config from endurance scenario!
* gogrinder hangs if scenario does not exist

samples
* recreate jmeter petclinic test in gogrinder

docu
* examples
* docu main page
* quickstart (new example based on benchmark)
* add some description on how to get things together with prometheus and grafana
* developer docu
* loadmodel


sub-packages
============

req
* add documentation!!!
* check status code not in [4xx, 5xx] HttpMetric?

util


Version 0.x
===========
* restructure repository so finding stuff becomes more obvious
* improvements on documentation and showcases


Version 0.1
===========
* http requests handle forms and cookies
* implement supercars test in gogrinder
* prometheus reporter for Meta
* added metrics_reporter for response kbytes and first-byte-after
* prepared alpine container to run the supercars example
* reporter "plugin" mechanism for measurement processing (event logging, Prometheus, ...)
* event logging sample reporter
* added logLevel to CLI
* send data to Prometheus (specialized prometheus reporter plugin)
* prometheus reporter buckets(0.5, 0.9, 0.95, 0.99)
* show table with results
* get results from restful ws
* make table sortable
* query data increments
* start / stop test
* (default is to start/stop test via UI and have cli report)
* -no-exec
* -no-report
* -no-frontend
* -no-prometheus
* add revision to frontend
* multiple users
* test Webserver routes
* variable pacing
* make thinktime and pacing config optional
* loadmodel mod date
* script configuration/params
* provide meta info (user, iteration)
* fixed handler logging and error handling
