backlog
=======

frontend
* authenticate frontend
* download results as csv file
* use backend port
* mtime format (is there a std. json time format)?
* fix sorting UI
* exit only if test is stopped

backend
* fix TODOs
* rework event-logger
* event-logger new file with every test run + fix timestamps
* event logger remove msg
* prometheus reporter for Meta

scenario
* add back the settings feature

tests
* test reporters (cover at least reporting of all std. metrics like elapsed, size, ...)
* test resource consumption
* reporters: Register(), Update()
* stop webserver route
* Add/SetReportPlugins
* metrics

defects
* loadmodel json format error not detected / reported
* need to check if frontend port is available at startup

samples
* recreate jmeter petclinic test in gogrinder
* implement supercars test in gogrinder

docu
* add some description on how to get things together with prometheus and grafana


Version 0.01
============
* added metrics_reporter for response kbytes and first-byte-after
* prepared alpine container to run the supercars example
* reporter "plugin" mechanism for measurement processing (event logging, Prometheus, ...)
* event logging sample reporter
* added logLevel to CLI
* send data to Prometheus (specialized prometheus reporter plugin)
* prometheus reporter buckets(0.5, 0.9, 0.95, 0.99)
* show table with results
* get results from restful ws
* make table sortable
* query data increments
* start / stop test
* (default is to start/stop test via UI and have cli report)
* -no-exec
* -no-report
* -no-frontend
* -no-prometheus
* add revision to frontend
* multiple users
* test Webserver routes
* variable pacing
* make thinktime and pacing config optional
* loadmodel mod date
* script configuration/params
* provide meta info (user, iteration)
* fixed handler logging and error handling
